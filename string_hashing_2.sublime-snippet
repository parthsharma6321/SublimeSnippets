<snippet>
	<content><![CDATA[
namespace string_hashing_2{

	
	//	For external module
	int64_t mod_add(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a+b) %m +m) %m;}
	int64_t mod_mul(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a*b) %m +m) %m;}
	int64_t mod_sub(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a-b) %m +m) %m;} 

	

	int64_t binpow(int64_t a, int64_t b, int64_t m){
		a %= m;
		int64_t res = 1;
		while(b){
			if(b & 1) res = res * a % m;
			a = a * a % m;
			b >>= 1;
		}
		return res;
	}

	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

	const int64_t N = 1e6 + 5;
	const int64_t primes[] = {1000000007, 1000000009, 1000000021, 1000000033, 1000000087, 1000000093, 1000000097, 1000000103, 1000000123, 1000000181};
	const int64_t bases[] = {67, 71, 73, 79, 83, 89, 97, 101, 103, 107};

	int64_t p1 = -1, p2 = -1, m1 = -1, m2 = -1;
	pair<int64_t, int64_t> myhash[N];
	pair<int64_t, int64_t> myhashRev[N];
	int64_t powp1[N], invpowp1[N], powp2[N], invpowp2[N];
	bool powersGenerated = false;


	void selectBases(){
		int64_t i1 = uniform_int_distribution<int64_t>(0, 9)(rng), i2;
		do{
			i2 = uniform_int_distribution<int64_t>(0, 9)(rng);
		}while(i1 == i2);

		int64_t j1 = uniform_int_distribution<int64_t>(0, 9)(rng), j2;
		do{
			j2 = uniform_int_distribution<int64_t>(0, 9)(rng);
		}while(j1 == j2);

		p1 = bases[i1], p2 = bases[i2], m1 = primes[j1], m2 = primes[j2];
	}

	void calculatePowers(){
		if(powersGenerated) {
			return;
		}
		if(p1 == -1) {
			selectBases();
		}
		powp1[0] = powp2[0] = invpowp1[0] = invpowp2[0] = 1;
		int64_t p1inv = binpow(p1, m1 - 2, m1);
		int64_t p2inv = binpow(p2, m2 - 2, m2);
		for(int64_t i = 1; i < N; i++){
			powp1[i] = mod_mul(powp1[i - 1], p1, m1);
			powp2[i] = mod_mul(powp2[i - 1], p2, m2);
			invpowp1[i] = mod_mul(invpowp1[i - 1], p1inv, m1);
			invpowp2[i] = mod_mul(invpowp2[i - 1], p2inv, m2);
		}
		powersGenerated = true;
	}

	int64_t getVal(const char& c){
		if(c >= 'a' and c <= 'z') {
			return c - 'a' + 1;
		}
		else if(c >= 'A' and c <= 'Z') {
			return c - 'A' + 27;
		}
		else{
			return c - '0' + 53; 
		}
	}

	void calculatemyhash(const string& s){
		int64_t n = s.size();
		calculatePowers();
		myhash[0].first = myhash[0].second = 0;
		for(int64_t i = 1; i <= n; i++){
			myhash[i].first = mod_add(myhash[i - 1].first, mod_mul(getVal(s[i - 1]), powp1[i - 1], m1), m1);
			myhash[i].second = mod_add(myhash[i - 1].second, mod_mul(getVal(s[i - 1]), powp2[i - 1], m2), m2);
		}
		myhashRev[0].first = myhashRev[0].second = 0;
		for(int64_t i = 1; i <= n; i++){
			myhashRev[i].first = mod_add(mod_mul(myhashRev[i - 1].first, p1, m1), getVal(s[i - 1]), m1);
			myhashRev[i].second = mod_add(mod_mul(myhashRev[i - 1].second, p2, m2), getVal(s[i - 1]), m2);
		}
	}

	pair<int64_t, int64_t> getmyhash(int64_t i, int64_t j) {
		return {mod_mul(mod_sub(myhash[j].first, myhash[i - 1].first, m1), invpowp1[i - 1], m1), 
				mod_mul(mod_sub(myhash[j].second, myhash[i - 1].second, m2), invpowp2[i - 1], m2)};
	}

	pair<int64_t, int64_t> getmyhashRev(int64_t i, int64_t j){
		return {mod_sub(myhashRev[j].first, mod_mul(myhashRev[i - 1].first, powp1[j - i + 1], m1), m1), 
				mod_sub(myhashRev[j].second, mod_mul(myhashRev[i - 1].second, powp2[j - i + 1], m2), m2)};
	}

}

using namespace string_hashing_2;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>string_hashing_2</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
