<snippet>
	<content><![CDATA[
namespace string_hashing{

	
	//	For external module
	int64_t mod_add(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a+b) %m +m) %m;}
	int64_t mod_mul(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a*b) %m +m) %m;}
	int64_t mod_sub(int64_t a, int64_t b, int64_t m){a%=m; b%=m; return ((a-b) %m +m) %m;} 

	

	int64_t binpow(int64_t a, int64_t b, int64_t m){
		a %= m;
		int64_t res = 1;
		while(b){
			if(b & 1) res = res * a % m;
			a = a * a % m;
			b >>= 1;
		}
		return res;
	}

	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

	const int64_t N = 1e6 + 5;
	const int64_t primes[] = {1000000007, 1000000009, 1000000021, 1000000033, 1000000087, 1000000093, 1000000097, 1000000103, 1000000123, 1000000181};
	const int64_t bases[] = {67, 71, 73, 79, 83, 89, 97, 101, 103, 107};

	int64_t p1 = -1, m1 = -1;
	int64_t myhash[N];
	int64_t myhashRev[N];
	int64_t powp1[N], invpowp1[N];
	bool powersGenerated = false;


	void selectBases(){
		int64_t i1 = uniform_int_distribution<int64_t>(0, 9)(rng);
		int64_t j1 = uniform_int_distribution<int64_t>(0, 9)(rng);
		p1 = bases[i1], m1 = primes[j1];
	}

	void calculatePowers(){
		if(powersGenerated) {
			return;
		}
		if(p1 == -1) {
			selectBases();
		}
		powp1[0] = invpowp1[0] = 1;
		int64_t p1inv = binpow(p1, m1 - 2, m1);
		for(int64_t i = 1; i < N; i++){
			powp1[i] = mod_mul(powp1[i - 1], p1, m1);
			invpowp1[i] = mod_mul(invpowp1[i - 1], p1inv, m1);
		}
		powersGenerated = true;
	}

	int64_t getVal(const char& c){
		if(c >= 'a' and c <= 'z') {
			return c - 'a' + 1;
		}
		else if(c >= 'A' and c <= 'Z') {
			return c - 'A' + 27;
		}
		else{
			return c - '0' + 53; 
		}
	}

	void calculatemyhash(const string& s){
		int64_t n = s.size();
		calculatePowers();
		myhash[0] = 0;
		for(int64_t i = 1; i <= n; i++){
			myhash[i] = mod_add(myhash[i - 1], mod_mul(getVal(s[i - 1]), powp1[i - 1], m1), m1);
		}
		myhashRev[0] = 0;
		for(int64_t i = 1; i <= n; i++){
			myhashRev[i] = mod_add(mod_mul(myhashRev[i - 1], p1, m1), getVal(s[i - 1]), m1);
		}
	}

	int64_t getmyhash(int64_t i, int64_t j) {
		return mod_mul(mod_sub(myhash[j], myhash[i - 1], m1), invpowp1[i - 1], m1);
	}

	int64_t getmyhashRev(int64_t i, int64_t j){
		return mod_sub(myhashRev[j], mod_mul(myhashRev[i - 1], powp1[j - i + 1], m1), m1);
	}

}

using namespace string_hashing;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>string_hashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
